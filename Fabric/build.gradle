plugins {
    id 'java'
    id 'idea'
    id 'fabric-loom' version '1.5-SNAPSHOT'
}

base {
    archivesName = "${mod_id}-${minecraft_version}-fabric-${mod_version}"
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"

    //mappings loom.officialMojangMappings()
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${parchment_mc}:${parchment_version}@zip")
    }

    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    //modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'

    compileOnly project(':Common')

    modCompileOnlyApi("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    modCompileOnlyApi("mezz.jei:jei-${minecraft_version}-fabric-api:${jei_version}")

    modRuntimeOnly("mezz.jei:jei-${minecraft_version}-fabric:${jei_version}")

    modApi "fuzs.forgeconfigapiport:forgeconfigapiport-fabric:${fcap_version}"
}

loom {
    if (project(':Common').file("src/main/resources/${mod_id}.accesswidener").exists()) {
        accessWidenerPath.set(project(':Common').file("src/main/resources/${mod_id}.accesswidener"))
    }

    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }

    runs {
        client {
            client()
            setConfigName("Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    source(project(":Common").sourceSets.main.allSource)
}

processResources {
    from project(":Common").sourceSets.main.resources
}
